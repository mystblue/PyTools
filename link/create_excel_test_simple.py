# -*- coding: utf-8 -*-

# エビデンスの画像をエクセル形式でまとめる

import openpyxl
from openpyxl import Workbook

sheet_list = ["決済_PayTG", "決済_PayTGマルチ", "決済_SmartTG", "決済_SmartTGマルチ","決済_SmartTGスタンドアロン","決済_SmartTGスタンドアロンマルチ"]

paytg_psp_list = ["DGFT", "ソニーペイメント", "ペイジェント", "GMO-PG", "SMBCファイナンス", "ヤマトフィナンシャル", "ゼウス", "SMBC-GMO", "GMO-MG", "三菱UFJニコス", "NTTコムオンライン", "楽天カード", "pay.jp"]

smarttg_psp_list = ["DGFT", "ソニーペイメント", "ペイジェント", "GMO-PG", "SMBCファイナンス", "ヤマトフィナンシャル", "ゼウス", "SMBC-GMO", "GMO-MG", "NTTコムオンライン", "楽天カード", "pay.jp"]

psp_dic = {
    "DGFT" : ["オーソリ", "オーソリ売上", "カードチェック", "カード預かり登録", "カード預かり更新"], 
    "ソニーペイメント" : ["オーソリ", "オーソリ売上", "カードチェック", "カード預かり登録", "カード預かり更新"],
    "ペイジェント" : ["オーソリ", "オーソリ売上", "カードチェック", "カード預かり登録", "カード預かり更新"], 
    "GMO-PG" : ["オーソリ", "オーソリ売上", "カードチェック", "カード預かり登録", "カード預かり更新"],
    "SMBCファイナンス" : ["オーソリ", "オーソリ売上", "カードチェック", "カード預かり(都度課金)登録", "カード預かり(都度課金)更新", "カード預かり(継続課金)登録", "カード預かり(継続課金)更新"], 
    "ヤマトフィナンシャル" : ["オーソリ", "オーソリ売上", "カードチェック", "カード預かり登録", "カード預かり更新"],
    "ゼウス" : ["オーソリ", "オーソリ売上", "カードチェック", "カード預かり登録", "カード預かり更新"],
    "SMBC-GMO" : ["オーソリ", "オーソリ売上", "カードチェック", "カード預かり登録", "カード預かり更新"],
    "GMO-MG" : ["カード預かり登録"],
    "三菱UFJニコス" : ["オーソリ", "オーソリ売上", "カードチェック"],
    "NTTコムオンライン" : ["カードチェック"],
    "楽天カード" : ["オーソリ", "オーソリ売上", "カードチェック", "カード預かり登録"],
    "pay.jp" : ["オーソリ", "オーソリ売上", "カード預かり登録"]
}

psp_dic1 = {
    "DGFT" : ["オーソリ"], 
    "ソニーペイメント" : ["オーソリ"],
    "ペイジェント" : ["オーソリ"], 
    "GMO-PG" : ["オーソリ"],
    "SMBCファイナンス" : ["オーソリ"], 
    "ヤマトフィナンシャル" : ["オーソリ"],
    "ゼウス" : ["オーソリ"],
    "SMBC-GMO" : ["オーソリ"],
    "GMO-MG" : ["カード預かり登録"],
    "三菱UFJニコス" : ["オーソリ"],
    "NTTコムオンライン" : ["カードチェック", "カードチェック"],
    "楽天カード" : ["オーソリ"],
    "pay.jp" : ["オーソリ"]
}

psp_dic2 = {
    "DGFT" : ["オーソリ売上"], 
    "ソニーペイメント" : ["オーソリ売上"],
    "ペイジェント" : ["オーソリ売上"], 
    "GMO-PG" : ["オーソリ売上"],
    "SMBCファイナンス" : ["オーソリ売上"], 
    "ヤマトフィナンシャル" : ["オーソリ売上"],
    "ゼウス" : ["オーソリ売上"],
    "SMBC-GMO" : ["オーソリ売上"],
    "GMO-MG" : ["カード預かり登録"],
    "三菱UFJニコス" : ["オーソリ売上"],
    "NTTコムオンライン" : ["カードチェック", "カードチェック"],
    "楽天カード" : ["オーソリ売上"],
    "pay.jp" : ["オーソリ売上"]
}

psp_dic3 = {
    "DGFT" : ["カードチェック"], 
    "ソニーペイメント" : ["カードチェック"],
    "ペイジェント" : ["カードチェック"], 
    "GMO-PG" : ["カードチェック"],
    "SMBCファイナンス" : ["カード預かり(都度課金)登録"], 
    "ヤマトフィナンシャル" : ["カードチェック"],
    "ゼウス" : ["カードチェック"],
    "SMBC-GMO" : ["カードチェック"],
    "GMO-MG" : ["カード預かり登録"],
    "三菱UFJニコス" : ["カードチェック"],
    "NTTコムオンライン" : ["カードチェック", "カードチェック"],
    "楽天カード" : ["カードチェック"],
    "pay.jp" : ["カード預かり登録"]
}

psp_dic4 = {
    "DGFT" : ["カード預かり登録"], 
    "ソニーペイメント" : ["カード預かり登録"],
    "ペイジェント" : ["カード預かり登録"], 
    "GMO-PG" : ["カード預かり登録"],
    "SMBCファイナンス" : ["カード預かり(都度課金)更新"], 
    "ヤマトフィナンシャル" : ["カード預かり登録"],
    "ゼウス" : ["カード預かり登録"],
    "SMBC-GMO" : ["カード預かり登録"],
    "GMO-MG" : ["カード預かり登録"],
    "三菱UFJニコス" : ["オーソリ"],
    "NTTコムオンライン" : ["カードチェック", "カードチェック"],
    "楽天カード" : ["カード預かり登録"],
    "pay.jp" : ["オーソリ"]
}

psp_dic5 = {
    "DGFT" : ["カード預かり更新"], 
    "ソニーペイメント" : ["カード預かり更新"],
    "ペイジェント" : ["カード預かり更新"], 
    "GMO-PG" : ["カード預かり更新"],
    "SMBCファイナンス" : ["カード預かり(継続課金)登録"], 
    "ヤマトフィナンシャル" : ["カード預かり更新"],
    "ゼウス" : ["カード預かり更新"],
    "SMBC-GMO" : ["カード預かり更新"],
    "GMO-MG" : ["カード預かり登録"],
    "三菱UFJニコス" : ["オーソリ売上"],
    "NTTコムオンライン" : ["カードチェック", "カードチェック"],
    "楽天カード" : ["オーソリ"],
    "pay.jp" : ["オーソリ売上"]
}

psp_dic6 = {
    "DGFT" : ["オーソリ"], 
    "ソニーペイメント" : ["オーソリ"],
    "ペイジェント" : ["オーソリ"], 
    "GMO-PG" : ["オーソリ"],
    "SMBCファイナンス" : ["カード預かり(継続課金)更新"], 
    "ヤマトフィナンシャル" : ["オーソリ"],
    "ゼウス" : ["オーソリ"],
    "SMBC-GMO" : ["オーソリ"],
    "GMO-MG" : ["カード預かり登録"],
    "三菱UFJニコス" : ["オーソリ"],
    "NTTコムオンライン" : ["カードチェック", "カードチェック"],
    "楽天カード" : ["オーソリ売上"],
    "pay.jp" : ["カード預かり登録"]
}

msg_dic = {
    "DGFT" : "カード番号：4111 1111 1111 1111\nその他の項目については任意の値を入力する",
    "ソニーペイメント": "カード番号：4123 0000 0000 0700\n有効期限：2028年12月\nその他の項目については任意の値を入力する",
    "ペイジェント": "カード番号：3580 0000 0000 1111\nその他の項目については任意の値を入力する",
    "GMO-PG": "カード番号：4111 1111 1111 1111\nその他の項目については任意の値を入力する",
    "SMBCファイナンス": "カード番号：4980 0000 0000 0000\nその他の項目については任意の値を入力する",
    "ヤマトフィナンシャル": "カード番号：0000 0000 0000 0003\nその他の項目については任意の値を入力する",
    "ゼウス": "カード番号：4335 4234 6954 3469\n有効期限：02/25\nその他の項目については任意の値を入力する",
    "SMBC-GMO": "カード番号：4111 1111 1111 1111\nその他の項目については任意の値を入力する",
    "GMO-MG": "カード番号：4111 1111 1111 1111\nその他の項目については任意の値を入力する",
    "三菱UFJニコス": "カード番号：4923 2000 0000 0000\nその他の項目については任意の値を入力する",
    "NTTコムオンライン": "カード番号：5212 3333 3333 3333\nその他の項目については任意の値を入力する",
    "楽天カード": "カード番号：4111 1111 1111 1111\nその他の項目については任意の値を入力する",
    "pay.jp": "カード番号：4242 4242 4242 4242\nその他の項目については任意の値を入力する"
}

modes = ["Pay TG PC連動"]

constraint = "決済取引用パラメータ設定ですべての項目を選択する。"

constraint2 = "決済取引用パラメータ設定で必須項目のみとする(デフォルトでチェックがついている項目のみとする)。"

content = "全パラメータをバリデーションルールに従って入力し、決済が正常に終了すること"

message = "・PCアプリケーションに取引結果が正常終了と表示されること。\n・TMSWEB-AWS環境の取引履歴に該当の取引結果が出力され、応答処理結果コードが「success」であること。"

def do_loop(ws, sheet):
    num = 14
    
    psp_list = paytg_psp_list
    if not sheet.startswith("決済_PayTG"):
        psp_list = smarttg_psp_list
    
    dic = psp_dic
    if sheet.startswith("決済_PayTGマルチ"):
        dic = psp_dic2
    elif sheet.startswith("決済_PayTG"):
        dic = psp_dic1
    elif sheet.startswith("決済_SmartTGスタンドアロンマルチ"):
        dic = psp_dic6
    elif sheet.startswith("決済_SmartTGスタンドアロン"):
        dic = psp_dic5
    elif sheet.startswith("決済_SmartTGマルチ"):
        dic = psp_dic4
    elif sheet.startswith("決済_SmartTG"):
        dic = psp_dic3
    
    for mode in modes:
        for psp in psp_list:
            methods = dic[psp]
            #for method in methods:
            for i, method in enumerate(methods):
                title = mode + "\n決済代行事業者：" + psp + "\n取引種別：" + method
                ws["C" + str(num)] = title
                ws["I" + str(num)] = "正常系"
                if psp == "NTTコムオンライン" and i == 1:
                    ws["K" + str(num)] = constraint2
                else:
                    ws["K" + str(num)] = constraint
                ws["S" + str(num)] = msg_dic[psp]
                ws["AI" + str(num)] = message
                num += 1

def report(sheet):
    wb = openpyxl.load_workbook("test.xlsx")
    ws = wb[sheet]  # ワークシートを指定
    #ws = wb.active  # アクティブなワークシートを選択
    do_loop(ws, sheet)
    wb.save('test.xlsx')

def all_report():
    for sheet in sheet_list:
        report(sheet)

if __name__ == '__main__':
    all_report()
