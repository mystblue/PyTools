# -*- coding: utf-8 -*-

# エビデンスの画像をエクセル形式でまとめる

import openpyxl
from openpyxl import Workbook


devices = ["VEGA3000", "P2 Pro", "P2 Lite SE"]

modes = ["PC連動", "Web API"]

patterns = ["新規に{version}をインストールする", "V1.0 をインストーラでインストール後、アップデータで{version}にアップデートする", "V1.0 をインストーラでインストール後、アップデータで{pre_version}にアップデート後、アップデータで{version}にアップデートする"]

updaters = ["Pay TG PC アプリケーションアップデータ", "Smart TG PC アプリケーションアップデータ"]

pc_rendou = [
	[
	  "「決済リクエスト発行済み」の記録\n{d}",
	  "機能テスト",
	  "PC 連動モードに設定し、{p}",
	  "PC アプリケーションで決済入力画面で実行ボタンを押した後、決済端末を操作する前にタスクマネージャで PC アプリを強制終了させる",
	  "取引履歴に「決済リクエスト発行済み」のまま記録されること"
	],
	[
	  "「決済リクエスト発行済み」の詳細表示\n{d}",
	  "UIテスト",
	  "上記の手順で、「決済リクエスト発行済み」のレコードを作成する",
	  "PC アプリケーションで上記のレコードの取引履歴詳細画面を開く",
	  "取引履歴詳細画面に「PCアプリケーションから決済端末へ決済リクエストを発行しました。決済端末の操作が完了している場合は決済が正常に完了している可能性があります。再度決済は実施せずに、決済代行事業者の管理画面をご確認ください。」と表示されること"
	],
	[
	  "正常な決済の流れの確認\n{d}",
	  "機能テスト",
	  "PC 連動モードに設定し、{p}",
	  "決済を実行する",
	  "取引履歴に「決済リクエスト発行済み」のレコードが正常終了のレコードに更新されていること"
	],
]

senario2 = [
	[
	  "決済端末へのリクエスト時取引履歴書き込み失敗\n{d}\n{mode}",
	  "エラーハンドリングテスト",
	  "PC 連動モードに設定する",
	  "Smart TG PC アプリケーション起動後に、SQLite コマンドで、「DealHistory」テーブルを削除する。\n「drop table DealHistory;」\n決済を実行する。",
	  "取引履歴の書き込みに失敗した画面が表示されること\nログに取引履歴の書き込みに失敗したことが出力されること"
	],
	[
	  "決済後、取引履歴更新失敗\n{d}\n{mode}",
	  "エラーハンドリングテスト",
	  "PC 連動モードに設定する",
	  "決済端末でクレジットカード入力画面が表示されるまで、決済を進める。\nPC でエクスプローラを開き、「C:\\ProgramData\\Smart TG\\SmartTGAppDB.sqlite3」を読み取り専用に変更する。\n決済端末でクレジットカード番号と有効期限を入力し、決済を成功させる。",
	  "取引履歴の書き込みに失敗した画面が表示されること\nログに取引履歴の書き込みに失敗したことが出力されること"
	],
]

senario3 = [
	[
	  "アップデータが正常に動作することの確認\n{u}",
	  "機能テスト",
	  "PC アプリの一番若いバージョン（V1.0）をインストーラでインストールする",
	  "アプリを一度も起動せず（SQLite3 DB が作成されていない状態で）、アップデータから最新版にアップデートする。\nケースで指定した操作を実行する。",
	  "アップデート後起動できること\nアップデート自動ペアリングできること\nバージョンが最新になっていること\n取引を実行し、正常に記録されること"
	],
	[
	  "アップデータが正常に動作することの確認\n{u}",
	  "機能テスト",
	  "PC アプリの一番若いバージョン（V1.0）をインストーラでインストールする",
	  "アプリを一度起動した状態（SQLite3 DB が作成されているが取引履歴がない状態で）、アップデータから最新版にアップデートする。\nケースで指定した操作を実行する。",
	  "アップデート後起動できること\nアップデート自動ペアリングできることバージョンが最新になっていること\n取引を実行し、正常に記録されること\nSQLite コマンドで SQLite DB の中を確認し、データが正しく引き継げていること"
	],
	[
	  "アップデータが正常に動作することの確認\n{u}",
	  "機能テスト",
	  "PC アプリの一番若いバージョン（V1.0）をインストーラでインストールする。\n取引を実行し、取引履歴があること",
	  "アップデータから最新版にアップデートする。\nケースで指定した操作を実行する。",
	  "アップデート後起動できること\nアップデート自動ペアリングできることバージョンが最新になっていること\n取引を実行し、正常に記録されること\nSQLite コマンドで SQLite DB の中を確認し、データが正しく引き継げていること"
	],
]

def do_loop(ws):
    num = 14

    ver = "1.12"
    pre_ver = "1.11"

    for p in pc_rendou:
        for device in devices:
            for pattern in patterns:
                if device == "VEGA3000":
                    ver = "3.16"
                    pre_ver="3.15"
                
                ws["C" + str(num)] = p[0].format(d=device)   # テスト項目（評価内容）
                ws["I" + str(num)] = "正常系"   # 分類
                ws["K" + str(num)] = p[1]   # テスト観点種別
                ws["N" + str(num)] = p[2].format(p=pattern.format(version=ver, pre_version=pre_ver))   # 事前条件
                ws["V" + str(num)] = p[3]   # 操作及び入力値
                ws["AL" + str(num)] = p[4]   # 振る舞い
                ws["BI" + str(num)] = "1" # テスト実施
                num += 1

    for s in senario2:
        for device in devices:
            for mode in modes:
                ws["C" + str(num)] = s[0].format(d=device, mode=mode)   # テスト項目（評価内容）
                ws["I" + str(num)] = "正常系"   # 分類
                ws["K" + str(num)] = s[1]   # テスト観点種別
                ws["N" + str(num)] = s[2]   # 事前条件
                ws["V" + str(num)] = s[3]   # 操作及び入力値
                ws["AL" + str(num)] = s[4]   # 振る舞い
                ws["BI" + str(num)] = "1" # テスト実施
                num += 1

    for s in senario3:
        for u in updaters:
            ws["C" + str(num)] = s[0].format(u=u)   # テスト項目（評価内容）
            ws["I" + str(num)] = "正常系"   # 分類
            ws["K" + str(num)] = s[1]   # テスト観点種別
            ws["N" + str(num)] = s[2]   # 事前条件
            ws["V" + str(num)] = s[3]   # 操作及び入力値
            ws["AL" + str(num)] = s[4]   # 振る舞い
            ws["BI" + str(num)] = "1" # テスト実施
            num += 1

def report():
    wb = openpyxl.load_workbook("test.xlsx")
    ws = wb['決済']  # ワークシートを指定
    ws = wb.active  # アクティブなワークシートを選択
    
    do_loop(ws)

    wb.save('test.xlsx')

if __name__ == '__main__':
    report()
