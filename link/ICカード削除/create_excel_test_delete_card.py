# -*- coding: utf-8 -*-

# エビデンスの画像をエクセル形式でまとめる

import openpyxl
from openpyxl import Workbook

services = ["Pay TG", "Smart TG", "Smart TG Lite"]

devices = ["PC 連動", "スタンドアロン"]

reads = ["磁気／IC", "マニュアル"]

categorys = ["オーソリ", "オーソリ売上"]

checks = ["有効性チェックON", "有効性チェックOFF"]

pattern1 = [
	[
	  "\n　オーソリ時カード削除",
	  "機能テスト",
	  "",
	  "[カード預かり登録：成功、{0}：成功]\n{0}を実行する",
	  "取引が正常に完了すること\nペイジェントオンラインの画面でカードが削除されないことを確認する"
	],
	[
	  "\n　オーソリ時カード削除",
	  "エラーハンドリングテスト",
	  "オーソリで GW エラーが発生するようにソースコードを書き換える",
	  "[カード預かり登録：成功、{0}：GW エラー、カード削除：成功]\n{0}を実行する",
	  "決済GWエラーコード「GWE24」、決済GWエラーメッセージ「ペイジェントへのリクエストで通信エラーになりました。正常に処理されたかペイジェントの管理画面で確認してください。」と表示されること\nペイジェントオンラインで登録したクレジットカードが削除されることを確認する"
	],
	[
	  "\n　オーソリ時カード削除",
	  "エラーハンドリングテスト",
	  "",
	  "[カード預かり登録：成功、{0}：ペイジェントエラー、カード削除：成功]\n金額に「10000000」を入力して{0}を実行する",
	  "ペイジェントのエラーコードが「2016」となり、エラーメッセージが表示されること\nペイジェントオンラインで登録したクレジットカードが削除されることを確認する"
	],
	[
	  "\n　オーソリ時カード削除",
	  "エラーハンドリングテスト",
	  "オーソリおよびカード削除で GW エラーが発生するようにソースコードを書き換える",
	  "[カード預かり登録：成功、{0}：GW エラー、カード削除：GW エラー]\n{0}を実行する",
	  "決済GWエラーコード「GWE45」、決済GWエラーメッセージ「ペイジェントのリクエストでエラーとなりました。対象の取引が正常に処理されたかペイジェントの管理画面で確認してください。ペイジェント管理画面にて顧客カードID「カードID」を削除してください。」と表示されること\nペイジェントオンラインの画面でカードが削除されないことを確認する"
	],
	[
	  "\n　オーソリ時カード削除",
	  "エラーハンドリングテスト",
	  "オーソリ GW エラーが発生し、カード削除で間違った「customer_card_id」を指定するようにソースコードを書き換える",
	  "[カード預かり登録：成功、{0}：GW エラー、カード削除：ペイジェントエラー]\n{0}を実行する",
	  "決済GWエラーコード「GWE45」、決済GWエラーメッセージ「ペイジェントのリクエストでエラーとなりました。対象の取引が正常に処理されたかペイジェントの管理画面で確認してください。ペイジェント管理画面にて顧客カードID「カードID」を削除してください。」と表示されること\nペイジェントオンラインの画面でカードが削除されないことを確認する"
	],
	[
	  "\n　オーソリ時カード削除",
	  "エラーハンドリングテスト",
	  "カード削除で GW エラーが発生するようにソースコードを書き換える",
	  "[カード預かり登録：成功、{0}：ペイジェントエラー、カード削除：GWエラー]\n金額に「10000000」を入力して{0}を実行する",
	  "決済GWエラーコード「GWE25」、決済GWエラーメッセージ「カードID削除に失敗しました。ペイジェント管理画面にて顧客カードID「カードID」を削除してください。」と表示されること\nペイジェントオンラインの画面でカードが削除されないことを確認する"
	],
	[
	  "\n　オーソリ時カード削除",
	  "エラーハンドリングテスト",
	  "カード削除で間違った「customer_card_id」を指定するようにソースコードを書き換える",
	  "[カード預かり登録：成功、{0}：ペイジェントエラー、カード削除：ペイジェントエラー]\n金額に「10000000」を入力して{0}を実行する",
	  "決済GWエラーコード「GWE25」、決済GWエラーメッセージ「カードID削除に失敗しました。ペイジェント管理画面にて顧客カードID「カードID」を削除してください。」と表示されること\nペイジェントオンラインの画面でカードが削除されないことを確認する"
	],
	[
	  "\n　オーソリ時カード削除",
	  "エラーハンドリングテスト",
	  "カード登録で GW エラーが発生するようにソースコードを書き換える",
	  "[カード預かり登録：GW エラー]\n{0}を実行する",
	  "決済GWエラーコード「GWE24」、決済GWエラーメッセージ「ペイジェントへのリクエストで通信エラーになりました。正常に処理されたかペイジェントの管理画面で確認してください。」と表示されること"
	],
	[
	  "\n　オーソリ時カード削除",
	  "エラーハンドリングテスト",
	  "",
	  "[カード預かり登録：ペイジェントエラー]\nクレジットカード番号に「1111 1111 1111 1111」を指定して{0}を実行する",
	  "ペイジェントのエラーコードが「2016」となり、エラーメッセージが表示されること"
	],
]

pattern2 = [
	[
	  "\n　オーソリ時カード削除",
	  "機能テスト",
	  "",
	  "[{0}：成功]\n{0}を行う",
	  "取引が正常に完了すること"
	],
	[
	  "\n　オーソリ時カード削除",
	  "エラーハンドリングテスト",
	  "GW エラーが発生するようにソースコードを書き換える",
	  "[{0}：GW エラー]\n{0}を行う",
	  "{0}が正常に終了せず、決済GWエラーコード「GWE25」、決済GWエラーメッセージ「カードID削除に失敗しました。ペイジェント管理画面にて顧客カードID「カードID」を削除してください。」と表示されること"
	],
	[
	  "\n　オーソリ時カード削除",
	  "エラーハンドリングテスト",
	  "",
	  "[{0}：ペイジェントエラー]\n金額に「10000000」を指定して{0}を行う",
	  "ペイジェントのエラーコードが「P011」となりエラーメッセージに「利用限度額を超過しています。」と表示されること"
	],
]
def do_loop(ws):
    num = 14

    for service in services:
        for device in devices:
            for read in reads:
                for category in categorys:
                    for check in checks:
                        if service == 'Pay TG' and read == '磁気／IC':
                            continue
                        if service == 'Pay TG' and device == 'スタンドアロン':
                            continue
                        if read == '磁気／IC':
                            for d in pattern1:
                                msg = service + "\n" + device + "\n" + read + "\n" + category + "\n" + check
                                ws["C" + str(num)] = msg + d[0]   # テスト項目（評価内容）
                                ws["I" + str(num)] = "正常系"   # 分類
                                ws["K" + str(num)] = d[1]   # テスト観点種別
                                ws["N" + str(num)] = d[2]   # 事前条件
                                ws["V" + str(num)] = d[3].format(category)   # 操作および入力値
                                ws["AL" + str(num)] = d[4]   # 振る舞い
                                ws["BI" + str(num)] = "1"
                                num += 1
                        else:
                            for d in pattern2:
                                msg = service + "\n" + device + "\n" + read + "\n" + category + "\n" + check
                                ws["C" + str(num)] = msg + d[0]   # テスト項目（評価内容）
                                ws["I" + str(num)] = "正常系"   # 分類
                                ws["K" + str(num)] = d[1]   # テスト観点種別
                                ws["N" + str(num)] = d[2]   # 事前条件
                                ws["V" + str(num)] = d[3].format(category)   # 操作および入力値
                                ws["AL" + str(num)] = d[4].format(category)   # 振る舞い
                                ws["BI" + str(num)] = "1"
                                num += 1

def report():
    wb = openpyxl.load_workbook("test.xlsx")
    ws = wb['オーソリ時カード削除']  # ワークシートを指定
    ws = wb.active  # アクティブなワークシートを選択
    
    do_loop(ws)

    wb.save('test.xlsx')

if __name__ == '__main__':
    report()
